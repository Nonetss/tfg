/* Generated by Yosys 0.51+101 (git sha1 314842d2a, g++ 14.2.1 -fPIC -O3) */

module comparador_8(a, b, amayorb, aigualb, amenorb);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input [7:0] a;
  wire [7:0] a;
  output aigualb;
  wire aigualb;
  output amayorb;
  wire amayorb;
  output amenorb;
  wire amenorb;
  input [7:0] b;
  wire [7:0] b;
  assign _2_ = a == b;
  assign _3_ = _2_ ? 1'h1 : 1'h0;
  assign _4_ = a < b;
  assign _5_ = _4_ ? 1'h1 : 1'h0;
  assign _0_ = a > b;
  assign _1_ = _0_ ? 1'h1 : 1'h0;
  assign amayorb = _1_;
  assign aigualb = _3_;
  assign amenorb = _5_;
endmodule

module contador_8(en, direccion, reset, clk, cuenta);
  wire _0_;
  wire [7:0] _1_;
  wire [7:0] _2_;
  wire [7:0] _3_;
  wire [7:0] _4_;
  reg [7:0] _5_;
  input clk;
  wire clk;
  wire [7:0] cont;
  output [7:0] cuenta;
  wire [7:0] cuenta;
  input direccion;
  wire direccion;
  input en;
  wire en;
  input reset;
  wire reset;
  assign _0_ = ~ direccion;
  assign _1_ = cont + 8'h01;
  assign _2_ = cont - 8'h01;
  assign _3_ = _0_ ? _1_ : _2_;
  assign _4_ = en ? _3_ : cont;
  always @(posedge clk, posedge reset)
    if (reset) _5_ <= 8'h00;
    else _5_ <= _4_;
  assign cont = _5_;
  assign cuenta = cont;
endmodule

module controlador(e, x, clk, reset, sec1, sec2);
  wire _00_;
  wire _01_;
  wire [2:0] _02_;
  wire _03_;
  wire [2:0] _04_;
  wire _05_;
  wire [2:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [2:0] _16_;
  reg [2:0] _17_;
  wire [2:0] _18_;
  wire [2:0] _19_;
  input clk;
  wire clk;
  input e;
  wire e;
  wire [2:0] estado_actual;
  wire [2:0] proximo_estado;
  input reset;
  wire reset;
  output sec1;
  wire sec1;
  output sec2;
  wire sec2;
  input x;
  wire x;
  assign _18_ = x ? 3'h1 : 3'h0;
  assign _19_ = e ? _18_ : 3'h0;
  assign _00_ = estado_actual == 3'h0;
  assign _01_ = ~ x;
  assign _02_ = _01_ ? 3'h2 : 3'h3;
  assign _03_ = estado_actual == 3'h1;
  assign _04_ = x ? 3'h4 : 3'h0;
  assign _05_ = estado_actual == 3'h2;
  assign _06_ = x ? 3'h5 : 3'h0;
  assign _07_ = estado_actual == 3'h3;
  assign _08_ = ~ x;
  assign _09_ = _08_ ? 1'h1 : 1'h0;
  assign _10_ = estado_actual == 3'h4;
  assign _11_ = ~ x;
  assign _12_ = _11_ ? 1'h1 : 1'h0;
  assign _13_ = estado_actual == 3'h5;
  function [0:0] \61 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \61  = b[0:0];
      6'b????1?:
        \61  = b[1:1];
      6'b???1??:
        \61  = b[2:2];
      6'b??1???:
        \61  = b[3:3];
      6'b?1????:
        \61  = b[4:4];
      6'b1?????:
        \61  = b[5:5];
      default:
        \61  = a;
    endcase
  endfunction
  assign _14_ = \61 (1'hx, { 1'h0, _09_, 4'h0 }, { _13_, _10_, _07_, _05_, _03_, _00_ });
  function [0:0] \65 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \65  = b[0:0];
      6'b????1?:
        \65  = b[1:1];
      6'b???1??:
        \65  = b[2:2];
      6'b??1???:
        \65  = b[3:3];
      6'b?1????:
        \65  = b[4:4];
      6'b1?????:
        \65  = b[5:5];
      default:
        \65  = a;
    endcase
  endfunction
  assign _15_ = \65 (1'hx, { _12_, 5'h00 }, { _13_, _10_, _07_, _05_, _03_, _00_ });
  function [2:0] \70 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \70  = b[2:0];
      6'b????1?:
        \70  = b[5:3];
      6'b???1??:
        \70  = b[8:6];
      6'b??1???:
        \70  = b[11:9];
      6'b?1????:
        \70  = b[14:12];
      6'b1?????:
        \70  = b[17:15];
      default:
        \70  = a;
    endcase
  endfunction
  assign _16_ = \70 (3'hx, { 6'h00, _06_, _04_, _02_, _19_ }, { _13_, _10_, _07_, _05_, _03_, _00_ });
  always @(posedge clk, posedge reset)
    if (reset) _17_ <= 3'h0;
    else _17_ <= proximo_estado;
  assign estado_actual = _17_;
  assign proximo_estado = _16_;
  assign sec1 = _14_;
  assign sec2 = _15_;
endmodule

module detector(X, E, reset, clk, mayor57, igual57, menor57);
  wire _0_;
  wire _1_;
  wire [7:0] _2_;
  wire [7:0] _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  input E;
  wire E;
  input X;
  wire X;
  input clk;
  wire clk;
  wire [7:0] cuenta5;
  wire [7:0] cuenta7;
  output igual57;
  wire igual57;
  output mayor57;
  wire mayor57;
  output menor57;
  wire menor57;
  input reset;
  wire reset;
  wire sec1;
  wire sec2;
  controlador componente1 (
    .clk(clk),
    .e(E),
    .reset(reset),
    .sec1(_0_),
    .sec2(_1_),
    .x(X)
  );
  contador_8 componente2 (
    .clk(clk),
    .cuenta(_2_),
    .direccion(1'h0),
    .en(sec1),
    .reset(reset)
  );
  contador_8 componente3 (
    .clk(clk),
    .cuenta(_3_),
    .direccion(1'h0),
    .en(sec2),
    .reset(reset)
  );
  comparador_8 componente4 (
    .a(cuenta5),
    .aigualb(_5_),
    .amayorb(_4_),
    .amenorb(_6_),
    .b(cuenta7)
  );
  assign sec1 = _0_;
  assign sec2 = _1_;
  assign cuenta5 = _2_;
  assign cuenta7 = _3_;
  assign mayor57 = _4_;
  assign igual57 = _5_;
  assign menor57 = _6_;
endmodule
